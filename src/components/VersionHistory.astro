---
/**
 * 历史版本组件
 * 用于在下载页面显示软件的历史版本列表
 */
---

<div id="version-history-section" class="version-history-section">
  <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
    <!-- 标题 -->
    <div class="text-center mb-8">
      <h3 class="text-3xl font-bold text-gray-900 dark:text-white mb-4">
        版本列表
      </h3>
      <p class="text-lg text-gray-600 dark:text-gray-400 max-w-2xl mx-auto">
        查看玩机管家的完整版本历史
      </p>
    </div>

    <!-- 历史版本内容 -->
    <div id="version-history-content">
      <!-- 加载状态 -->
      <div id="version-loading" class="text-center py-12">
        <div class="inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-current border-r-transparent align-[-0.125em] motion-reduce:animate-[spin_1.5s_linear_infinite]"></div>
        <p class="mt-4 text-gray-600 dark:text-gray-400">加载历史版本中...</p>
      </div>

      <!-- 版本列表 -->
      <div id="version-list" class="hidden space-y-4">
        <!-- 版本项将通过JavaScript动态插入 -->
      </div>

      <!-- 错误状态 -->
      <div id="version-error" class="hidden text-center py-12">
        <div class="text-gray-500 dark:text-gray-400">
          <div class="w-16 h-16 bg-gray-100 dark:bg-gray-700 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          </div>
          <h4 class="text-lg font-medium text-gray-700 dark:text-gray-300 mb-2">暂无历史版本信息</h4>
          <p class="text-sm text-gray-500 dark:text-gray-400">版本信息正在更新中，请稍后再试</p>
        </div>
      </div>
    </div>
  </div>
</div>

<style is:global>
  .version-history-section {
    @apply py-12 bg-white dark:bg-gray-900;
  }

  .version-item {
    @apply bg-white dark:bg-gray-800 rounded-lg p-6 border border-gray-200 dark:border-gray-700;
  }

  .version-header {
    @apply flex items-start justify-between mb-4;
  }

  .version-actions {
    @apply flex flex-col items-stretch gap-3;
  }

  .latest-badge {
    @apply inline-block ml-2 px-2 py-1 text-xs font-medium bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200 rounded;
  }

  .version-id {
    @apply text-xs text-gray-500 dark:text-gray-400 font-mono mt-1;
  }

  .download-button {
    @apply inline-flex items-center px-5 py-3 bg-blue-600 text-white text-lg font-medium rounded hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:ring-offset-white;
    text-decoration: none;
  }

  .no-download {
    @apply inline-flex items-center px-3 py-1.5 bg-gray-200 dark:bg-gray-600 text-gray-600 dark:text-gray-300 text-sm font-medium rounded;
  }

  .version-notice {
    @apply mt-4 p-3 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-700 rounded text-sm text-yellow-800 dark:text-yellow-200;
  }

  .version-info {
    @apply flex-1;
  }

  .version-number {
    @apply text-2xl font-bold text-gray-900 dark:text-white mb-2;
  }

  .version-date {
    @apply text-sm text-gray-600 dark:text-gray-300;
  }

  .version-type {
    @apply inline-flex items-center px-3 py-1 rounded text-xs font-medium;
  }

  .version-type-stable {
    @apply bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200;
  }

  .version-type-beta {
    @apply bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200;
  }

  .version-type-prerelease {
    @apply bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200;
  }

  .version-notes {
    @apply text-sm text-gray-700 dark:text-gray-300 bg-gray-50 dark:bg-gray-700/50 rounded p-4 mb-4;
  }

  .version-footer {
    @apply mt-4 pt-4 border-t border-gray-100 dark:border-gray-700 flex justify-between items-center;
  }

  /* 下载按钮容器：默认单列，小屏堆叠；大屏四列水平排列 */
  .download-buttons {
    display: grid;
    grid-template-columns: repeat(1, minmax(0, 1fr));
    gap: 0.5rem; /* 8px */
    width: 100%;
  }

  /* 让按钮在栅格中等宽并居中内容 */
  .download-button {
    @apply justify-center;
    width: 100%;
  }

  @media (min-width: 1024px) {
    .download-buttons {
      grid-template-columns: repeat(4, minmax(0, 1fr));
      gap: 0.75rem; /* 12px */
    }
  }

  /* 响应式调整 */
  @media (max-width: 768px) {
    .version-item {
      padding: 1rem;
    }

    .version-number {
      font-size: 1.5rem;
    }

    .version-actions {
      @apply flex-col items-stretch gap-2;
    }

    .download-button, .no-download {
      @apply text-xs px-2 py-1;
    }
  }
</style>

<script is:inline>
  class VersionHistory {

    constructor() {
      this.content = document.getElementById('version-history-content');
      this.loadingElement = document.getElementById('version-loading');
      this.listElement = document.getElementById('version-list');
      this.errorElement = document.getElementById('version-error');
      this.latestVersionId = null; // 用于存储最新版本ID

      this.loadVersions();
    }

    async loadVersions() {
      try {
        this.showLoading();

        const response = await fetch('https://api-g.lacs.cc/app/software/id/1/versions', {
          mode: 'cors',
          credentials: 'include',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          }
        });

        if (!response.ok) {
          throw new Error(`API请求失败，状态码: ${response.status}`);
        }

        const { success, data, meta } = await response.json();

        if (!success || !Array.isArray(data)) {
          throw new Error('API返回数据格式不正确');
        }

        // 设置最新版本ID（使用meta中的currentVersion或data中的第一个版本）
        const latestVersion = data.find(v => v.version === meta?.software?.currentVersion) || data[0];
        this.latestVersionId = latestVersion?.id;

        // 渲染版本列表
        this.renderVersions(data);

      } catch (error) {
        console.error('加载版本历史出错:', error);
        
        const errorElement = document.getElementById('version-error-message');
        if (errorElement) {
          errorElement.textContent = error.message.includes('CORS') ? 
            '无法获取版本信息，请检查网络或稍后再试' : 
            `版本信息加载失败: ${error.message}`;
        }
        
        this.showError();
      }
    }

    createVersionElement(version) {
      const div = document.createElement('div');
      div.className = 'version-item';

      const isLatest = version.id === this.latestVersionId;
      const hasDownloadLink = version.downloadLinks?.official;
      const formattedDate = this.formatDate(version.releaseDate);

      // 生成下载按钮HTML
      const downloadButtonHtml = hasDownloadLink ? `
        <a href="${this.escapeHtml(version.downloadLinks.quark)}" 
           class="download-button"
           target="_blank" rel="noopener noreferrer">
          ${isLatest ? '下载最新版' : '下载此版本'}
        </a>

        
      ` : `
        <span class="no-download">
          无下载链接
        </span>
      `;

      div.innerHTML = `
        <div class="version-header">
          <div class="version-info">
            <div class="flex items-center">
              <div class="version-number">v${this.escapeHtml(version.version || '未知版本')}</div>
              ${isLatest ? '<span class="latest-badge">最新</span>' : ''}
            </div>
            <div class="version-date">${formattedDate}</div>
            <div class="version-id">ID: ${version.id}</div>
          </div>
          <div class="version-actions">
            <span class="version-type ${this.getVersionTypeClass(version)}">
              ${this.getVersionTypeLabel(version)}
            </span>
            ${downloadButtonHtml}
          </div>
        </div>

        ${version.releaseNotes ? `
          <div class="version-notes">
            <div class="font-medium text-gray-900 dark:text-gray-100 mb-2">
              更新内容
            </div>
            <div class="space-y-1">
              ${this.formatUpdateNotes(version.releaseNotes)}
            </div>
          </div>
        ` : ''}

        <div class="version-footer">
          <div class="text-xs text-gray-500 dark:text-gray-400">
            发布于 ${formattedDate}
          </div>
          
        </div>
      `;

      return div;
    }

    showLoading() {
      if (this.loadingElement) this.loadingElement.classList.remove('hidden');
      if (this.listElement) this.listElement.classList.add('hidden');
      if (this.errorElement) this.errorElement.classList.add('hidden');
    }

    showError() {
      if (this.loadingElement) this.loadingElement.classList.add('hidden');
      if (this.listElement) this.listElement.classList.add('hidden');
      if (this.errorElement) this.errorElement.classList.remove('hidden');
    }

    renderVersions(versions) {
      if (!this.listElement) return;

      // 按版本ID降序排列（最新的在前面）
      versions.sort((a, b) => b.id - a.id);

      this.listElement.innerHTML = '';

      versions.forEach(version => {
        const versionElement = this.createVersionElement(version);
        this.listElement.appendChild(versionElement);
      });

      if (this.loadingElement) this.loadingElement.classList.add('hidden');
      if (this.listElement) this.listElement.classList.remove('hidden');
    }

    createVersionElement(version) {
      const div = document.createElement('div');
      div.className = 'version-item';

      const versionTypeClass = this.getVersionTypeClass(version);
      const formattedDate = this.formatDate(version.releaseDate);
      const isLatest = version.id === this.latestVersionId;
      const hasDownloadLink = version.downloadLinks?.official;

      // 生成下载按钮HTML
      const downloadButtonHtml = hasDownloadLink && isLatest ? `
        <div class="download-buttons">
          <a href="${this.escapeHtml(version.downloadLinks.official)}" 
             class="download-button"
             target="_blank" rel="noopener noreferrer">
            夸克网盘
          </a>
          <a href="${this.escapeHtml(version.downloadLinks.thunderPan)}" 
             class="download-button"
             target="_blank" rel="noopener noreferrer">
            迅雷网盘
          </a>
          <a href="${this.escapeHtml(version.downloadLinks.baidu)}" 
             class="download-button"
             target="_blank" rel="noopener noreferrer">
            百度网盘
          </a>
        </div>
      ` : `
        <span class="no-download">
          无下载链接
        </span>
      `;

      div.innerHTML = `
        <div class="version-header">
          <div class="version-info">
            <div class="flex items-center">
              <div class="version-number">v${this.escapeHtml(version.version || '未知版本')}</div>
              ${isLatest ? '<span class="latest-badge">最新</span>' : ''}
            </div>
            <div class="version-date">${formattedDate}</div>
            <div class="version-id">ID: ${version.id}</div>
          </div>
          <div class="version-actions">
            <span class="version-type ${versionTypeClass}">
              ${this.getVersionTypeLabel(version)}
            </span>
            ${isLatest ? downloadButtonHtml : ''}
          </div>
        </div>

        ${version.releaseNotes ? `
          <div class="version-notes">
            <div class="font-medium text-gray-900 dark:text-gray-100 mb-2">
              更新内容
            </div>
            <div class="space-y-1">
              ${this.formatUpdateNotes(version.releaseNotes)}
            </div>
          </div>
        ` : ''}

        ${!isLatest ? `
          <div class="version-notice">
            <div class="flex items-start">
              <div>
                <strong>提示：</strong>此版本不提供下载，仅供查看更新日志。请下载最新版本。
              </div>
            </div>
          </div>
        ` : ''}

        <!-- 版本信息底部 -->
        <div class="version-footer">
          <div class="text-xs text-gray-500 dark:text-gray-400">
            发布于 ${formattedDate}
          </div>

        </div>
      `;

      return div;
    }

    getVersionTypeClass(version) {
      if (version.isStable) return 'version-type-stable';
      if (version.isBeta) return 'version-type-beta';
      if (version.isPrerelease) return 'version-type-prerelease';
      return 'version-type-stable';
    }

    getVersionTypeLabel(version) {
      if (version.isStable) return '稳定版';
      if (version.isBeta) return '测试版';
      if (version.isPrerelease) return '预览版';
      return '稳定版';
    }

    formatDate(dateString) {
      try {
        const date = new Date(dateString);
        return date.toLocaleDateString('zh-CN', {
          year: 'numeric',
          month: 'long',
          day: 'numeric'
        });
      } catch (error) {
        return '未知日期';
      }
    }

    escapeHtml(text) {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }

    formatUpdateNotes(notes) {
      if (!notes) return '';

      // 将换行符转换为HTML换行
      const formattedNotes = this.escapeHtml(notes)
        .replace(/\n/g, '<br>')
        .replace(/\*\s*(.+?)(?=\n|$)/g, '<div class="flex items-start space-x-2 mb-1"><span class="text-blue-500 font-bold flex-shrink-0">•</span><span>$1</span></div>')
        .replace(/-\s*(.+?)(?=\n|$)/g, '<div class="flex items-start space-x-2 mb-1"><span class="text-purple-500 font-bold flex-shrink-0">→</span><span>$1</span></div>');

      return formattedNotes;
    }
  }

  // 初始化历史版本组件
  document.addEventListener('DOMContentLoaded', () => {
    new VersionHistory();
  });
</script>