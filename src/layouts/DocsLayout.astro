---
import BaseLayout from './BaseLayout.astro';
import Header from '@/components/Header.astro';
import Footer from '@/components/Footer.astro';

export interface Props {
  title: string;
  description?: string;
  currentPath?: string;
}

import { generateDocsNavigation } from '@/utils/markdown';

const { title, description, currentPath } = Astro.props;

// 动态生成文档导航结构
let docsNavigation;
try {
  docsNavigation = generateDocsNavigation();
} catch (error) {
  console.error('Error generating docs navigation:', error);
  // 回退到静态导航
  docsNavigation = [
    {
      title: '开始使用',
      items: [
        { name: '介绍', href: '/docs', icon: '📖' },
        { name: '安装指南', href: '/docs/installation/windows', icon: '🔧' },
        { name: '快速入门', href: '/docs/user-guide/getting-started', icon: '🚀' },
      ]
    },
    {
      title: '用户指南',
      items: [
        { name: '设备连接', href: '/docs/user-guide/device-connection', icon: '🔌' },
        { name: '远程控制', href: '/docs/user-guide/remote-control', icon: '📱' },
        { name: '文件管理', href: '/docs/user-guide/file-management', icon: '📁' },
        { name: '应用管理', href: '/docs/user-guide/app-management', icon: '📦' },
        { name: '批量操作', href: '/docs/user-guide/batch-operations', icon: '⚡' },
      ]
    },
    {
      title: '帮助',
      items: [
        { name: '故障排除', href: '/docs/troubleshooting', icon: '🔧' },
        { name: '常见问题', href: '/docs/troubleshooting/faq', icon: '❓' },
        { name: '联系支持', href: '/about-contact', icon: '💬' },
      ]
    }
  ];
}

// 获取当前路径，用于高亮导航
const currentUrl = Astro.url.pathname;
---

<BaseLayout title={title} description={description}>
  <!-- 在head中添加样式和脚本 -->
  <link rel="stylesheet" href="/src/styles/markdown.css" slot="head" />
  <script src="/js/syntax-highlight.js" slot="head"></script>

  <div class="min-h-screen flex flex-col">
    <!-- 统一导航栏 -->
    <Header />

    <!-- 文档内容区域 -->
    <div class="flex-grow bg-gray-50 dark:bg-gray-900">
      <!-- 面包屑导航 -->
      <div class="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div class="py-4">
            <nav class="flex items-center space-x-2 text-sm text-gray-500 dark:text-gray-400">
              <a href="/" class="hover:text-gray-700 dark:hover:text-gray-300">首页</a>
              <span>/</span>
              <a href="/docs" class="hover:text-gray-700 dark:hover:text-gray-300">文档</a>
              {currentPath && (
                <>
                  <span>/</span>
                  <span class="text-gray-900 dark:text-white">{currentPath}</span>
                </>
              )}
            </nav>
            <h1 class="mt-2 text-3xl font-bold text-gray-900 dark:text-white">{title}</h1>
            {description && (
              <p class="mt-2 text-lg text-gray-600 dark:text-gray-300">{description}</p>
            )}
          </div>
        </div>
      </div>

      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div class="flex flex-col lg:flex-row gap-8">
          <!-- 侧边栏导航 -->
          <aside class="lg:w-64 flex-shrink-0">
            <div class="sticky top-20">
            <!-- 移动端菜单按钮 -->
            <div class="lg:hidden mb-4">
              <button
                type="button"
                class="docs-menu-toggle w-full flex items-center justify-between px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700"
              >
                <span>文档导航</span>
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
              </button>
            </div>

            <!-- 导航菜单 -->
            <nav class="docs-menu hidden lg:block bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-4">
              {docsNavigation.map((section: any) => (
                <div class="mb-6 last:mb-0">
                  <h3 class="text-sm font-semibold text-gray-900 dark:text-white mb-3 uppercase tracking-wider">
                    {section.title}
                  </h3>
                  <ul class="space-y-2">
                    {section.items.map((item: any) => (
                      <li>
                        <a
                          href={item.href}
                          class={`flex items-center space-x-3 px-3 py-2 text-sm rounded-md transition-colors duration-200 ${
                            currentUrl === item.href || currentUrl.startsWith(item.href + '/')
                              ? 'bg-blue-50 dark:bg-blue-900/20 text-blue-700 dark:text-blue-300 font-medium'
                              : 'text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white hover:bg-gray-50 dark:hover:bg-gray-700'
                          }`}
                        >
                          <span class="text-base">{item.icon}</span>
                          <span>{item.name}</span>
                        </a>
                      </li>
                    ))}
                  </ul>
                </div>
              ))}
            </nav>
            </div>
          </aside>

          <!-- 主内容区域 -->
          <main class="flex-1 min-w-0">
            <div class="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6 lg:p-8">
              <div class="prose prose-gray dark:prose-invert max-w-none">
                <slot />
              </div>
            </div>

            <!-- 页面导航 -->
            <div class="mt-8 flex justify-between items-center pt-6 border-t border-gray-200 dark:border-gray-700">
              <div class="flex-1">
                <!-- 上一页链接将通过JavaScript动态生成 -->
                <div id="prev-page"></div>
              </div>
              <div class="flex-1 text-right">
                <!-- 下一页链接将通过JavaScript动态生成 -->
                <div id="next-page"></div>
              </div>
            </div>
          </main>
        </div>
      </div>
    </div>

    <!-- 统一页脚 -->
    <Footer />
  </div>
</BaseLayout>

<style>
  /* 自定义prose样式 */
  .prose {
    @apply text-gray-900 dark:text-gray-100;
  }
  
  .prose h1 {
    @apply text-3xl font-bold text-gray-900 dark:text-white border-b border-gray-200 dark:border-gray-700 pb-4 mb-6;
  }
  
  .prose h2 {
    @apply text-2xl font-semibold text-gray-900 dark:text-white mt-8 mb-4;
  }
  
  .prose h3 {
    @apply text-xl font-semibold text-gray-900 dark:text-white mt-6 mb-3;
  }
  
  .prose p {
    @apply text-gray-700 dark:text-gray-300 leading-relaxed mb-4;
  }
  
  .prose a {
    @apply text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 no-underline hover:underline;
  }
  
  .prose ul, .prose ol {
    @apply text-gray-700 dark:text-gray-300 mb-4;
  }
  
  .prose li {
    @apply mb-2;
  }
  
  .prose code {
    @apply bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-gray-100 px-2 py-1 rounded text-sm;
  }
  
  .prose pre {
    @apply bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-gray-100 p-4 rounded-lg overflow-x-auto mb-4;
  }
  
  .prose blockquote {
    @apply border-l-4 border-blue-500 pl-4 italic text-gray-600 dark:text-gray-400 mb-4;
  }
  
  .prose table {
    @apply w-full border-collapse border border-gray-300 dark:border-gray-600 mb-4;
  }
  
  .prose th, .prose td {
    @apply border border-gray-300 dark:border-gray-600 px-4 py-2 text-left;
  }
  
  .prose th {
    @apply bg-gray-50 dark:bg-gray-700 font-semibold;
  }
</style>

<script>
  // 移动端菜单切换
  document.addEventListener('DOMContentLoaded', () => {
    const menuToggle = document.querySelector('.docs-menu-toggle');
    const menu = document.querySelector('.docs-menu');
    
    if (menuToggle && menu) {
      menuToggle.addEventListener('click', () => {
        menu.classList.toggle('hidden');
        
        // 旋转箭头图标
        const icon = menuToggle.querySelector('svg');
        if (icon) {
          icon.style.transform = menu.classList.contains('hidden') ? 'rotate(0deg)' : 'rotate(180deg)';
        }
      });
    }
  });
</script>
