---
import MainLayout from '@/layouts/MainLayout.astro';
import { SITE_CONFIG } from '@/config/site';
import ScrollColorAnimation from '@/components/ScrollColorAnimation.astro';
import DynamicVersionConfig from '@/components/DynamicVersionConfig.astro';
import VersionHistory from '@/components/VersionHistory.astro';
import DownloadsSection from '@/components/DownloadsSection.astro';
---

<MainLayout
  title="下载 - 玩机管家"
  description="下载玩机管家 (Android Device Management Tool)，支持 Windows、macOS 和 Linux。立即开始管理您的 Android 设备。"
>
  <!-- Hero Section -->
  <section class="hero-section py-20 lg:py-32 min-h-screen flex items-center dynamic-background" data-parallax="0.3">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
      <h1
        class="text-5xl md:text-7xl lg:text-8xl font-bold text-gray-900 dark:text-white mb-8 tracking-tight leading-none"
        data-scroll-color="hero-title"
        data-fade-in
      >
        下载 {SITE_CONFIG.name}
      </h1>
      <p
        class="text-2xl md:text-3xl text-gray-600 dark:text-gray-300 max-w-4xl mx-auto mb-8 font-light"
        data-scroll-color="feature-text"
        data-fade-in
      >
        专业的 Android 设备管理工具
      </p>
      <p
        class="text-lg md:text-xl text-gray-500 dark:text-gray-400 max-w-3xl mx-auto mb-12"
        data-scroll-color="feature-text"
        data-fade-in
      >
        支持 Windows 平台，macOS 和 Linux 版本正在开发中
      </p>
      <!-- 动态版本信息组件 -->
      <DynamicVersionConfig />
    </div>
  </section>

  <!-- Version History -->
  <VersionHistory />

  <!-- 滚动效果组件 -->
  <ScrollColorAnimation />
</MainLayout>

<script>
  // @ts-nocheck
  // 动态版本配置管理
  class DynamicDownloadManager {
    constructor() {
      this.dynamicDownloads = null;
      this.versionInfo = null;
      this.init();
    }

    init() {
      // 加载动态下载配置
      this.loadDynamicDownloads();

      // 加载版本信息
      this.loadVersionInfo();

      // 更新下载链接
      this.updateDownloadLinks();

      // 绑定下载事件
      this.bindDownloadEvents();

      // 自动检测平台
      this.detectPlatform();
    }

    loadDynamicDownloads() {
      try {
        const dataElement = document.getElementById('dynamic-downloads-data');
        if (dataElement && dataElement.textContent) {
          console.log('Raw dynamic downloads data:', dataElement.textContent);
          this.dynamicDownloads = JSON.parse(dataElement.textContent);
          console.log('Dynamic downloads loaded:', this.dynamicDownloads);
        } else {
          console.log('No dynamic downloads data element found or empty content');
        }
      } catch (error) {
        console.error('Failed to load dynamic downloads:', error);
        const dataElement = document.getElementById('dynamic-downloads-data');
        if (dataElement) {
          console.error('Raw content that failed to parse:', dataElement.textContent);
        }
      }
    }

    loadVersionInfo() {
      try {
        const dataElement = document.getElementById('version-info-data');
        if (dataElement && dataElement.textContent) {
          console.log('Raw version info data:', dataElement.textContent);
          this.versionInfo = JSON.parse(dataElement.textContent);
          console.log('Version info loaded:', this.versionInfo);
          
          // 显示版本信息
          if (this.versionInfo.latestVersion) {
            console.log('Latest version ID:', this.versionInfo.latestVersion.id);
            console.log('Download URL:', this.versionInfo.latestVersion.downloadLinks?.official);
          }
        } else {
          console.log('No version info data element found or empty content');
        }
      } catch (error) {
        console.error('Failed to load version info:', error);
        const dataElement = document.getElementById('version-info-data');
        if (dataElement) {
          console.error('Raw content that failed to parse:', dataElement.textContent);
        }
      }
    }

    updateDownloadLinks() {
      if (!this.dynamicDownloads) {
        console.log('No dynamic downloads available, using static configuration');
        return;
      }

      // 更新各平台下载链接
      ['windows', 'macos', 'linux'].forEach(platform => {
        this.updatePlatformDownloads(platform);
      });
    }

    updatePlatformDownloads(platform) {
      const platformData = this.dynamicDownloads[platform];
      if (!platformData) return;

      const platformElement = document.querySelector(`[data-platform="${platform}"]`);
      if (!platformElement) return;

      // 更新下载按钮
      const downloadButtons = platformElement.querySelectorAll('[data-download-type]');
      downloadButtons.forEach(button => {
        const downloadType = button.getAttribute('data-download-type');
        const downloadData = platformData[downloadType];

        if (downloadData && downloadData.url && downloadData.url !== '#') {
          // 更新链接
          button.setAttribute('href', downloadData.url);

          // 更新文件名
          const filenameElement = button.querySelector('.download-filename');
          if (filenameElement && downloadData.filename) {
            filenameElement.textContent = downloadData.filename;
          }

          // 更新文件大小
          const sizeElement = button.querySelector('.download-size');
          if (sizeElement && downloadData.size) {
            sizeElement.textContent = `(${downloadData.size})`;
          }

          // 添加动态更新标识
          button.classList.add('dynamic-updated');

          console.log(`Updated ${platform} ${downloadType}:`, downloadData.filename);
        }
      });
    }

    bindDownloadEvents() {
      // 绑定所有下载按钮的点击事件
      document.querySelectorAll('[data-download-type], .download-button').forEach(button => {
        button.addEventListener('click', (event) => {
          const platform = button.getAttribute('data-platform') || 'windows';
          const downloadType = button.getAttribute('data-download-type') || 'installer';
          const isLatestVersion = this.versionInfo?.latestVersion ? true : false;

          if (platform && downloadType) {
            this.trackDownload(platform, downloadType, isLatestVersion);
          }
        });
      });
    }

    trackDownload(platform, type, isLatestVersion = false) {
      console.log(`Download tracked: ${platform} - ${type} - Latest: ${isLatestVersion}`);

      // 获取当前版本信息
      const version = this.versionInfo?.latestVersion?.version || '1.0.0';
      const versionId = this.versionInfo?.latestVersion?.id || 'unknown';

      // Google Analytics 事件追踪
      if (typeof gtag !== 'undefined') {
        gtag('event', 'download', {
          'platform': platform,
          'download_type': type,
          'version': version,
          'version_id': versionId,
          'is_latest': isLatestVersion,
          'source': 'dynamic_api'
        });
      }
      
      // 显示下载通知
      if (isLatestVersion) {
        console.log(`正在下载最新版本 ${version} (ID: ${versionId})`);
      }
    }

    detectPlatform() {
      const userAgent = navigator.userAgent.toLowerCase();
      let platform = 'windows'; // default

      if (userAgent.includes('mac')) {
        platform = 'macos';
      } else if (userAgent.includes('linux')) {
        platform = 'linux';
      }

      // 高亮检测到的平台
      const platformElement = document.querySelector(`[data-platform="${platform}"]`);
      if (platformElement) {
        platformElement.style.border = '2px solid #3b82f6';
        platformElement.style.boxShadow = '0 0 20px rgba(59, 130, 246, 0.3)';
      }

      console.log(`Detected platform: ${platform}`);
    }
  }

  // 初始化动态下载管理器
  document.addEventListener('DOMContentLoaded', () => {
    window.downloadManager = new DynamicDownloadManager();
  });
</script>

<style>
  /* Hero Section Background */
  .hero-section {
    position: relative;
    background-image: url('/img/admt-bg.webp');
    background-size: cover;
    background-position: center center;
    background-repeat: no-repeat;
    background-attachment: fixed;
  }

  /* Background overlay for better text readability */
  .hero-section::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(255, 255, 255, 0.75);
    z-index: 1;
  }

  /* Dark mode overlay */
  :global(.dark) .hero-section::before {
    background: rgba(0, 0, 0, 0.7);
  }

  /* Ensure content is above the overlay */
  .hero-section > div {
    position: relative;
    z-index: 2;
  }

  /* Responsive background attachment */
  @media (max-width: 768px) {
    .hero-section {
      background-attachment: scroll;
    }
  }

  /* Enhance text contrast on background */
  .hero-section h1,
  .hero-section p {
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  :global(.dark) .hero-section h1,
  :global(.dark) .hero-section p {
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
  }
</style>
